/* write css in sequential manner top to bottom elements */
/* reset cuz it causes issues */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  /* size is calc including padding and border and ele shrink if we inc padding. */
}

body {
  /* color -> won't get inherited by child -> impractical */
  color: #444;
  font-family: sans-serif;
  position: relative;
  /* to make the like button to move to bottom */
}

.container {
  border-top: 10px solid #1098ad;
  width: 1200px;
  margin: 0 auto;
  /* automatically calculated by the browseer acc to window size // when width is specified so it will shrink acc to that otherwise for block lvl ele's margin is 0, 0*/
  /*it's giving the illusion cuz margin is automatically equal // used for centering the element  */
  position: relative;
}

.post-header h2::after {
  content: "TOP";
  position: absolute;
  top: 0;
  /* absolute ele will overlap with other ele while float doesn't */
  right: -20px;
  font-size: 15px;
  font-weight: bold;
  background-color: yellow;
  color: black;
  padding: 5px 10px;
  letter-spacing: 2px;
}

.main-header {
  background-color: #f7f7f7;
  padding: 20px 10px;
  /* margin-bottom: 60px; */
  /* height: 80px; */
  /*by using fixed height if increase the size of nav ele then they will overflow and the header will not grow or adapt */
}

.post-header {
  /* margin-bottom: 40px; */
}

nav {
  font-size: 18px;
}

article {
  margin-bottom: 60px;
}

/* Smaller elements */
h1,
h2,
h3 {
  color: #1bbfd8;
}

h1 {
  font-size: 26px;
  text-transform: uppercase;
  font-style: italic;
}

h2 {
  font-size: 40px;
  margin-bottom: 30px;
  position: relative;
}

h3 {
  font-size: 30px;
  margin-bottom: 20px;
  margin-top: 40px;
  /* margin collapsing bigger one */
}

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
  margin-bottom: 20px;
}

p {
  font-size: 22px;
  line-height: 1.5;
  margin-bottom: 15px;
}

ul,
ol {
  margin-left: 50px;
  margin-bottom: 20px;
}

li {
  font-size: 22px;
  margin-bottom: 10px;
  /* font size doesn't decrease on padding/margin instead web page grows */
}

/* Id and class Selectors */
#author {
  font-style: italic;
  font-size: 18px;
}

#copyright {
  font-size: 16px;
}

.related-author {
  font-size: 18px;
  font-weight: bold;
}

.related {
  list-style: none;
  margin-left: 0;
}

/*pseudo classes -> pseudo-class is a keyword added to a selector that specifies a special state of the selected element(s)
Psuedo Classes -> CSS automatically selects
li : nth-Child(specify the number of child) { --> odd/even ->selects odd/even list points
changes
}
Misconception about pseudo classes:
-> article p:first-child {
} it will not work as first child of article is header not a paragraph, for it to work make it a paragraph
*/

/*  it searches every element even inside ones (element inside element like article-> header so it searches in header as well) in the html and if its first child is a paragraph -> property will be applied.*/
/* p:first-child {
  color: #ff5349;
} 
Pseudo classes work well with structured elements like lists, etc and doesn't work well with classes where we mix up a lot of elements cuz somewhere p would be second/third child
*/
li:last-child {
  margin-bottom: 0;
}

/* Styling Links :
# a { color : } -> not a good practice, use pseudo class instead

The links are defined as order -> LVHA
*/

/* only targets elements that are actual links having href attribute */
a:link {
  color: #1098ad;
  text-decoration: none;
}

/* after visiting the link */
a:visited {
  color: #1098ad;
}

a:hover {
  color: #ff5349;
  font-weight: bold;
  text-decoration: underline #ff5349;
  /* Shorthand property of text decoration */
}

/* During the click */
a:active {
  background-color: #000000;
  font-style: italic;
}
/* Priority Selectors -> !important(avoid)>inline style>id>class>element>universal selector>parent properties (if there are many of them last one in the code is applied) */
/* Universal Selector *

* {
  border-top = 10px solid #23232; useful for applying properties to all elements which do not get inherited
}

*/
.post-image {
  width: 100%;
  /* 100% of the window */
  /* width: 300px; */
  height: auto;
  /* other one automatically adapts to aspect ratio */
}

nav a:link {
  display: inline-block;
  margin-right: 30px;
  /* margin-top: 10px; */
}

nav a:link:last-child {
  margin-right: 0;
}

/* LIKE BUTTON */

.like-button {
  cursor: pointer;
  font-size: 22px;
  padding: 15px;

  /* ABSOLUTE POSITIONING */
  position: absolute;
  /* postition is relative to viewport thatwhy like button moved only to bottom current view */
  bottom: 50px;
  right: 50px;
}

/* PSEUDO ELEMENTS */
h1::first-letter {
  font-style: normal;
  margin-right: 5px;
}

/* p::first-line {
  color: red;
} */
/* adjacent siblings  */
/* h3 + p::first-line {
  color: red;
} */

aside {
  background-color: #f7f7f7;
  border-top: 5px solid #1098ad;
  border-bottom: 5px solid #1098ad;
  padding: 50px 0;
  width: 300px;
}

/* more complex selector gets applied even if it was on top of the less complex one avoid using a complex one*/
/* .main-header nav a:link {
  margin: 100px;
} */

/* by default any pseudo element is inline element */
/* footer p::after {
  content: "BOTTOM";
  display: inline-block;
  font-size: 14px;
  background-color: #ff5349;
  color: #fff;
  position: absolute;
  bottom: 25px;
  right: 15px;
} */

/* Notes 
/* Colors :
-> left side of any color top to down is grey shade. 
Shorthand -> #44444 -> hash444 

-> footer p {    // footer/header is also an element
  font-size: 16px;

-> height of ele = sum of all excluding margin

-> use classes but don't use unnecessarily like some element which is not gonna change select the element
-> text don't shrinks but images do
# p,headings -> block level elements
# inline elements -> em, links (a),strong; > heights and width don't apply & paddings and margins applied only horizontally
images-> inline block elements

Positioning :
for the like button set position relative of the parent element with relation to what you want the like buttton to be placed
static: normal
relative : same as static but can modify left, right, top , left. is removed from the document flow. it will overlap or overflow cuz it will move as it would have normally been if there was no parent element,
relative positions elements relative to itself,  other elements remain intact. 
absolute:completely removes the element from flow, other elements act like that it doesn't exist. absolute positons an element inside of some parent container that it can reference.
for absolute positon parent element's reference the parent element also has to be other than static
fixed -> positions with respect to html element
sticky - as it hits page becomes fixed otherwise relative
} */

/* Floats */
/* #element is removed from document flow(not completely) and becomes absolute and other elements float beside it.
 */
/* .author-img {
  float: left;
  margin-bottom: 15px;
  margin-right: 15px;
} */

/* element starts at left end until you make author also float left */
/* .author {
  float: left;
} */
/* collapsing elements: if all children of element becomes float the ele height=0 cuz ele act like they r not there on the pge
the container ele will not adjust its height acc to floated ele */
/* h1 {
  float: left;
}
nav {
  float: right;
} */
/* avoiding collapsing use clear */

/* .clear {
  clear: both;
} */

/* .clearfix::after {
  content: "";
  clear: both;
  display: block;
} */
/* 
article {
  float: left;
  width: 825px;
} */
/* aside { */
/* background-color assign when working with that ele */
/* float: right;
  width: 300px;
  padding: 40px; */
/* margin-right: -100px; its  also a thing if space gets bigger*/
/* footer dislocates to bottom when we when it becomes larger than the remaining size */
/* } */
/* footer floats after aside as we make both float cuz float states every element below it will float respect to that ele.*/
/* footer {
  clear: both;
} */

/* flexbox */
.main-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
}
.author-box {
  display: flex;
  margin-bottom: 15px;
}
.author {
  margin: 0;
  align-items: center;
  margin-left: 15px;
  justify-content: center;
}
.related-post {
  display: flex;
  gap: 20px;
  margin-bottom: 30px;
}

/* instead use gap property .related-details {
  margin-left: 20px;
} */
.related-links:link {
  font-weight: bold;
  font-size: 18px;
}
.related-author {
  font-style: italic;
  font-weight: normal;
  font-size: 14px;
}
.post-header-related-container {
  align-items: flex-start;
  display: flex;
  gap: 75px;
  margin-bottom: 20px;
}
.related {
  flex: 1 0 300px;
  /* width: 300px; don't use width instead use flex basis property with flexbox items */
  /* for not stretching the element vertically */
}
article {
  margin-bottom: 0;
}

/* CSS grid- layout */

.container {
  display: grid;
  grid-template-columns: 1fr 300px;
  align-items: start;
  row-gap: 60px;
  column-gap: 75px;
  justify-content: center;
}
.main-header {
  grid-column: 1/-1;
}

/*  centering a div using margin property : top, left, bottom They determine the position of an element relative to its nearest positioned ancestor. which is the nearest relative element. so top will start from there otherwise html.  for default they have no effect.
      body {
        font-family: "Inter", sans-serif;
        color: #343a40;
        line-height: 1;
        min-height: 100vh;
        position: relative;
      }
      img {
        height: 200px;
      }

      .carousel {
        background-color: #087f5b;
        position: absolute;
        width: 800px;
        top: 50%;
        left: 20%;
      } */
