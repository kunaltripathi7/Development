/********* First Create a design system on the top */
/* --- 01 TYPOGRAPHY SYSTEM

- Font sizes (px)
10 / 12 / 14 / 16 / 18 / 20 / 24 / 30 / 36 / 44 / 52 / 62 / 74 / 86 / 98

- Font weights
Default: 400
Medium: 500
Semi-bold: 600
Bold: 700

- Line heights
Default: 1
Small: 1.05
Medium: 1.2
Paragraph default: 1.6

- Letter spacing
-0.5px
0.75px

--- 02 COLORS

- Primary: #e67e22
- Tints:
#fdf2e9
#fae5d3
#eb984e

- Shades: 
#cf711f
#45260a

- Accents:
- Greys

#888
#767676 (lightest grey allowed on #fff)
#6f6f6f (lightest grey allowed on #fdf2e9)
#555
#333

--- 05 SHADOWS

0 2.4rem 4.8rem rgba(0, 0, 0, 0.075);

--- 06 BORDER-RADIUS

Default: 9px
Medium: 11px

--- 07 WHITESPACE

- Spacing system (px)
2 / 4 / 8 / 12 / 16 / 24 / 32 / 48 / 64 / 80 / 96 / 128 */

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  /* á¹£et to 10 for easy calc 
    don't use a fixed value like this cuz user needs to inc/dec font size so it will fix it
    instead use % -> 16*62.5/100 -> 10px, if inc/dec our font size also inc/dec
      font-size: 10px; */
  font-size: 62.5%;
}

/* Specify all the prprty's which you want to get inherited by all elements */
body {
  font-family: "Rubik", sans-serif;
  line-height: 1;
  /* default font weight */
  font-weight: 400;
  color: #555;
}

/* .test {
    background-color: red; */
/* padding: 100px;  */
/* width: 1000px; 
    max-width shrinks the ele when the viewport touches so makes the layout fluid, %won't work cuz it will make the ele's width a % of the vp width we want our ele to be 1000px wide not some dynamic %
    width of the ele will be 100% of container ele's width if the container ele width is less than max-width*/
/* max-width: 1000px; */

/* Rem is root ele font size (html default 16px) 
    so the root ele's font size will cause the change everywhere (for that everywhere it should be rem to maintain consistency)
    Goal of rem -> dynamically change layout with the root's font size*/
/* padding: 4rem;
    max-width: 50rem;
  } */

/* Use same control over the page -> we will need to use grid later on so use grid here as well even if its a 1d layout */

/* How to divide flex items in equal space -> all items flex:1 ( it determines how much of the available space inside the flex container the item should take up, compared to other flex items.) & ele that has larger size than the flex item size enclose it in a container and set width = container's width*/
/* this is why we needed a hero div otherwise the whole section would have been in center */

/* ************************ */
/* General Reusable Components */
.section-how {
  padding: 9.6rem 0;
}

/* reuasable components : can make a class component which will contain only the similar properties which are not changed. then for every modification we create a seperate class so both css gets applied. mech to avoid dry  */
/* didn't applied container to hero section cuz need it a lil bit wider (good practice) 
  container -> to center the section (reusable)*/
.container {
  max-width: 120rem;
  padding: 0 3.2rem;
  margin: 0 auto;
}

.grid {
  display: grid;
  column-gap: 6.4rem;
  row-gap: 9.6rem;
}

.grid--center-v {
  /* we could have also centered the text box via flex, choose the most efficient */
  align-items: center;
}
.grid--2-cols {
  grid-template-columns: repeat(2, 1fr);
}

/* dry -> group and apply the common properties and some extra properties (no extra class req) */
.heading-primary,
.heading-secondary,
.heading-tertiary {
  font-weight: 700;
  color: #333;
  /* color: #45260a; */
  /* color: #343a40; */
  letter-spacing: -0.5px;
}

.subheading {
  display: block;
  font-size: 1.6rem;
  font-weight: 500;
  color: #cf711f;
  text-transform: uppercase;
  margin-bottom: 1.6rem;
  letter-spacing: 0.75px;
}

.heading-secondary {
  font-size: 4.4rem;
  line-height: 1.2;
  margin-bottom: 9.6rem;
}

.heading-primary {
  font-size: 5.2rem;
  line-height: 1.05;
  margin-bottom: 3.2rem;
}

.heading-tertiary {
  font-size: 3rem;
  line-height: 1.2;
  margin-bottom: 3.2rem;
}

.btn:link,
.btn:visited {
  display: inline-block;
  font-size: 2rem;
  padding: 1.6rem 3.2rem;
  cursor: pointer;
  border-radius: 0.9rem;
  text-decoration: none;
  font-weight: 600;

  /* Only necessary for .btn */
  border: none;
  cursor: pointer;
  /* Put transition on original "state" */
  /* transition : requires prprty name + seconds to do it (applied on src ele) */
  /* transition: background-color 0.3s; */
  transition: all 0.3s;
}

/* can use pixels for tiny spaces letter-spacing
  if ele's have some common prprtys make a seperate class and assign that class to those ele's*/
.btn--full:link,
.btn--full:visited {
  background-color: #e67e22;
  color: #fff;
}

.btn--full:hover,
.btn--full:active {
  background-color: #cf711f;
}

.btn--outline:link,
.btn--outline:visited {
  background-color: #fff;
  color: #555;
}

.btn--outline:hover,
.btn--outline:active {
  background-color: #fdf2e9;

  /* border shifts the whole layout -> use trick box shadow inset to make the border inside of the ele */
  /* border: 3px solid #fff; */

  /* Trick to add border inside */
  box-shadow: inset 0 0 0 3px #fff;
}
.margin-right-sm {
  margin-right: 1.6rem !important;
}
